#!/usr/bin/env python3
#
# ~/.bin/trash
#

import argparse
import os
import math
from shutil import rmtree
from pathlib import Path

class TrashSnapshot:
    def __init__(self, path):
        self.path = Path(path)
        self.__set_default_values()
        self.__analyse_trash()
    
    def __set_default_values(self):
        self.exists = True
        self.is_empty = True
        self.total = {
            'items': 0,
            'files': 0,
            'directories': 0,
        }
        self.files = []
        self.directories = []

    def __sort_items(self, items):
        for item in items:
            item = Path(self.path, item)
            if item.is_dir():
                self.directories.append(item)
            else:
                self.files.append(item)

    def __analyse_trash(self):
        if not self.path.exists():
            self.exists = False
            return

        items = os.listdir(self.path)
        self.is_empty = len(items) == 0
        self.__sort_items(items)
        self.total = {
            'items': len(items),
            'files': len(self.files),
            'directories': len(self.directories),
        }

def parse_arguments():
    parser = argparse.ArgumentParser(description='Command line interface for managing and interacting with the current user\'s trash bin')
    group = parser.add_mutually_exclusive_group()
    group.add_argument('--info', action='store_true',
                       help='display information about the trash bin')
    group.add_argument('--create', action='store_true',
                       help='create a trash bin location to place files in')
    group.add_argument('--empty', action='store_true',
                       help='empty the trash bin of files')
    parser.add_argument('files', type=str, nargs='*',
                        help='files to place in the trash')

    return parser.parse_args(), parser

def is_query(args):
    return args.info or args.create or args.empty

def validate_arguments(args, parser):
    if is_query(args) and len(args.files) > 0:
        parser.error('cannot query trash bin and provide files')
    elif not is_query(args) and len(args.files) == 0:
        parser.print_help()
        exit(1)

def get_valid_arguments(trash_path):
    args, parser = parse_arguments()
    validate_arguments(args, parser)
    return args

def show_trash_info(trash):
    print(f'Trash bin @ ({trash.path})')
    if not trash.path.exists():
        print('Currently does not exist.')
        print('To make one use "--create" query.')
        return

    if trash.is_empty:
        print('Currently is empty.')
        return

    files_percent = math.floor((trash.total['files'] / trash.total['items']) * 100)
    dirs_percent = 100 - files_percent
    print(f'Currently there are {trash.total["items"]} items in total:')
    print(f'  {trash.total["files"]} files ({files_percent}%)')
    print(f'  {trash.total["directories"]} directories ({dirs_percent}%)')

def create_trash(trash):
    print(f'Creating trash bin @ ({trash.path})')
    if trash.exists:
        print('Trash bin already exists.')
        return

    os.mkdir(trash.path)
    print('Trash bin created.')

def empty_trash(trash):
    if trash.is_empty:
        print('The trash bin is currently empty.')
        return

    print(f'Emptying {trash.total["items"]} items within the trash bin.')

    for file in trash.files:
        os.remove(file)
    print(f'Emptied {trash.total["files"]} files.')

    for dir in trash.directories:
        rmtree(dir)
    print(f'Emptied {trash.total["directories"]} directories.')
    print('Finished emptying trash bin.')

def handle_query(args, trash):
    if args.info:
        show_trash_info(trash)
    elif args.create:
        create_trash(trash)
    elif args.empty:
        empty_trash(trash) 

def handle_files(args, trash):
    for item in args.files:
        item = Path(item)
        if item.exists():
            item.rename(trash.path / item.name)
        else:
            print(f'error: item "{item}" does not exist')
            exit(1)
    print('Moved all items to trash.')

def main():
    trash = TrashSnapshot(Path.home() / '.local/share/Trash/files')
    args = get_valid_arguments(trash.path)
    if is_query(args):
        handle_query(args, trash)
    else:
        handle_files(args, trash)

if __name__ == '__main__':
    main()
